name: CI

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:

jobs:
  setup_rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

  build_and_test:
    runs-on: ubuntu-latest
    needs: setup_rust
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      # Set up Docker and Docker Compose
      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      # Run tests in the Rust application container
      - name: Run Tests
        run: |
          docker-compose exec rust_app /bin/bash -c "\
            cargo test --release && \
            cargo tarpaulin --release --engine llvm --ignore-tests --out Xml"

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        run: |
          docker-compose exec rust_app bash -c "\
            bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }} -f coverage.xml"

      # Tear down the Docker Compose services after tests complete
      - name: Tear down Docker Compose
        run: |
          docker-compose down

  lint_and_format:
    runs-on: ubuntu-latest
    needs: setup_rust
    steps:
      - uses: actions/checkout@v3

      # Lint and format code
      - name: Lint and Format
        run: |
          cargo clippy -- -D warnings
          cargo fmt --check

  documentation_benchmarks_audit:
    runs-on: ubuntu-latest
    needs: setup_rust
    steps:
      - uses: actions/checkout@v3

      # Generate documentation, run benchmarks, and audit dependencies
      - name: Documentation, Benchmarks, and Audit
        run: |
          cargo doc --no-deps
          cargo bench
          cargo audit
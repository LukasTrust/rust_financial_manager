name: CI

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:

jobs:
  setup_rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Rust environment and tools
      - name: Set up Rust
        run: |
          rustc --version
          cargo --version
          rustup component add clippy rustfmt
          cargo install cargo-tarpaulin cargo-audit

  cargo_build_release:
    runs-on: ubuntu-latest
    needs: setup_rust
    steps:
      # No need to checkout again, workspace is already available
      # Build the project in release mode
      - name: Build with Cargo in Release Mode
        run: |
          cargo build --release

  run_tests_and_coverage:
    runs-on: ubuntu-latest
    needs: cargo_build_release
    steps:
      - uses: actions/checkout@v3

      # Remove any existing containerd or docker installations that may conflict
      - name: Remove conflicting container runtimes
        run: |
          sudo apt-get remove -y containerd docker docker-engine docker.io containerd.io

      # Install Docker using the official Docker installation script
      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com | sh

      # Pull the prebuilt Docker image that sets up the application and database
      - name: Pull Docker image
        run: |
          docker pull your-docker-image:latest

      # Run tests and code coverage inside Docker container
      - name: Run Tests and Coverage inside Docker container
        run: |
          docker run --env-file .env.ci your-docker-image:latest \
          /bin/bash -c "\
            cargo test --release && \
            cargo tarpaulin --release --engine llvm --ignore-tests --out Xml"

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }} -f coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint_and_format:
    runs-on: ubuntu-latest
    needs: setup_rust
    steps:
      # Lint and format code
      - name: Lint and Format
        run: |
          cargo clippy -- -D warnings
          cargo fmt --check

  documentation_benchmarks_audit:
    runs-on: ubuntu-latest
    needs: setup_rust
    steps:
      # Generate documentation, run benchmarks, and audit dependencies
      - name: Documentation, Benchmarks, and Audit
        run: |
          cargo doc --no-deps
          cargo bench
          cargo audit --deny-warnings

name: CI

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Remove containerd and install Docker and Docker Compose
      - name: Install Docker and Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Ensure Docker Compose is installed

      # Set RUN_TESTS to true for Docker Compose
      - name: Set Environment Variable
        working-directory: ./docker
        run: echo "RUN_TESTS=true" >> $GITHUB_ENV  # Use this if you want to run tests

       # Start Docker Compose
      - name: Start Docker Compose
        working-directory: ./docker
        run: docker-compose up -d

      # Run additional commands or tests in the container if needed
      - name: Run Tests with Docker Compose
        working-directory: ./docker
        run: |
          docker-compose exec -T rust_app /bin/bash -c "cargo tarpaulin --release --engine llvm --ignore-tests --out Xml"
          
        # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        working-directory: ./docker
        run: |
          docker-compose exec -T rust_app bash -c "bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }} -f coverage.xml"

        # Tear down the Docker Compose services after tests complete
      - name: Tear down Docker Compose
        working-directory: ./docker
        run: docker-compose down

  lint_and_format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Lint and format code
      - name: Lint and Format
        run: |
          cargo clippy -- -D warnings
          cargo fmt --check

  documentation_benchmarks_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Generate documentation, run benchmarks, and audit dependencies
      - name: Documentation, Benchmarks, and Audit
        run: |
          cargo doc --no-deps
          cargo bench
          cargo audit